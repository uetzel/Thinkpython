# -*- coding: utf-8 -*-
"""
Created on Wed Mar 20 20:38:47 2019

@author: Usman Kottwal
"""

#Chapter 6
#Fruitful funtions aka functions with return values (aka non void/null values)

#As an exercise, write a compare function that takes two values
#x and y, and returns 1 if x>y, 0 if x == y and -1 if x<y

def compare(x,y):
    if x > y:
        return 1
    elif x == y:
        return 0
    else:
        return -1
    
#print (compare(2,2))


#Exercise 6.3. A palindrome is a word that is spelled the same way backward
#and forward, like "noon" and "redivider". Recursively, a word is a palindrome
#if the first and the last letters are the same and the middle is a palindrome.
#The following are functions that take a string argument and return the first, 
#last, and middle letters: 
def first(word): 
    return word[0]

def last(word):
    return word[-1]

def middle(word):                   # |a|b|c|d|e: liest von l nach r -->
    return word[1:-1]               # ZÃ¤hlt von 0 an



#1. Type these functions into a file named palindrome.py and test them out. 
#What happens if you call "middle" with a string with two letters? One letter?
#What about the empty string, which is written "" and contains no letters?
    
#2. Write a function called "is_palindrome" that takes a string argument and
#returns "True" if it is a palindrome and "False" otherwise. Remember that you
#can use the built-in Function "len" to check the length of a string. 
    
def is_palindrome(word):
    if len(word) <= 1:
        return True
    if first(word) != last(word):
        return False
    return is_palindrome(middle(word))



#print (is_palindrome("gollog"))
    


#Exercise 6.4. A number, a, is a power of b if it is divisible by b and a/b is
#a power of b. Write a function called is_power that takes parameters "a" and  
#"b" and returns "True" if "a" is a power of "b". Note: You will have to think
#about the base case
    
def is_power(a,b):              #Checks if a is a power of b
    if a==b:
        return True
    elif a%b == 0: 
            return is_power(a/b, b)
    else: 
        return False

#print (is_power(27,3))
    
"""
Exercise 6.5. The greatest common divisor (GCD) of a and b is the largest 
number that divides both of them with no remainder.

One way to find the GCD of two number is based on the observation that if r is
the remainder when a is divided by b, then gcd(a,b) = gcd(b,r). As a base case,
we can use gcd(a,0)=a.

Write a function called "gcd" that takes parameters "a" and "b" and returns
their greatest common divisor.
"""

def gcd(a,b):
    if b == 0:
        return a
    elif a%b != 0:
        return gcd(b, a%b)

    
    
print (gcd(12,4))
